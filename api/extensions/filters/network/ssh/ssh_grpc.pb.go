// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.2
// source: api/extensions/filters/network/ssh/ssh.proto

package ssh

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamManagement_ManageStream_FullMethodName = "/pomerium.extensions.ssh.StreamManagement/ManageStream"
)

// StreamManagementClient is the client API for StreamManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamManagementClient interface {
	ManageStream(ctx context.Context, opts ...grpc.CallOption) (StreamManagement_ManageStreamClient, error)
}

type streamManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamManagementClient(cc grpc.ClientConnInterface) StreamManagementClient {
	return &streamManagementClient{cc}
}

func (c *streamManagementClient) ManageStream(ctx context.Context, opts ...grpc.CallOption) (StreamManagement_ManageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamManagement_ServiceDesc.Streams[0], StreamManagement_ManageStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamManagementManageStreamClient{stream}
	return x, nil
}

type StreamManagement_ManageStreamClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type streamManagementManageStreamClient struct {
	grpc.ClientStream
}

func (x *streamManagementManageStreamClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamManagementManageStreamClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamManagementServer is the server API for StreamManagement service.
// All implementations should embed UnimplementedStreamManagementServer
// for forward compatibility
type StreamManagementServer interface {
	ManageStream(StreamManagement_ManageStreamServer) error
}

// UnimplementedStreamManagementServer should be embedded to have forward compatible implementations.
type UnimplementedStreamManagementServer struct {
}

func (UnimplementedStreamManagementServer) ManageStream(StreamManagement_ManageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ManageStream not implemented")
}

// UnsafeStreamManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamManagementServer will
// result in compilation errors.
type UnsafeStreamManagementServer interface {
	mustEmbedUnimplementedStreamManagementServer()
}

func RegisterStreamManagementServer(s grpc.ServiceRegistrar, srv StreamManagementServer) {
	s.RegisterService(&StreamManagement_ServiceDesc, srv)
}

func _StreamManagement_ManageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamManagementServer).ManageStream(&streamManagementManageStreamServer{stream})
}

type StreamManagement_ManageStreamServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type streamManagementManageStreamServer struct {
	grpc.ServerStream
}

func (x *streamManagementManageStreamServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamManagementManageStreamServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamManagement_ServiceDesc is the grpc.ServiceDesc for StreamManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.extensions.ssh.StreamManagement",
	HandlerType: (*StreamManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ManageStream",
			Handler:       _StreamManagement_ManageStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/extensions/filters/network/ssh/ssh.proto",
}
