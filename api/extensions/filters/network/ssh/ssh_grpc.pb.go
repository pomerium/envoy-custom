// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: github.com/pomerium/envoy-custom/api/extensions/filters/network/ssh/ssh.proto

package ssh

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamManagement_ManageStream_FullMethodName = "/pomerium.extensions.ssh.StreamManagement/ManageStream"
	StreamManagement_ServeChannel_FullMethodName = "/pomerium.extensions.ssh.StreamManagement/ServeChannel"
)

// StreamManagementClient is the client API for StreamManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The StreamManagement service is implemented by the Pomerium Authorize
// service on the same internal GRPC server as ExtAuthz.
type StreamManagementClient interface {
	// ManageStream is called by Envoy when a long-lived stream begins.
	// This RPC stays alive for the lifetime of the stream. If it ends before
	// the underlying stream does, Envoy will close the connection.
	ManageStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error)
	// ServeChannel is called when Pomerium "hijacks" the stream by setting target=Internal
	// in an AllowResponse. When this happens, Envoy reroutes traffic such that this stream
	// temporarily becomes the upstream server, and delays the connection to the real upstream
	// until this stream is closed. Afterwards, Envoy connects to the real upstream server and
	// "hands off" the stream internally in a way that is transparent to the downstream.
	ServeChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChannelMessage, ChannelMessage], error)
}

type streamManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamManagementClient(cc grpc.ClientConnInterface) StreamManagementClient {
	return &streamManagementClient{cc}
}

func (c *streamManagementClient) ManageStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamManagement_ServiceDesc.Streams[0], StreamManagement_ManageStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamManagement_ManageStreamClient = grpc.BidiStreamingClient[ClientMessage, ServerMessage]

func (c *streamManagementClient) ServeChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChannelMessage, ChannelMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamManagement_ServiceDesc.Streams[1], StreamManagement_ServeChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChannelMessage, ChannelMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamManagement_ServeChannelClient = grpc.BidiStreamingClient[ChannelMessage, ChannelMessage]

// StreamManagementServer is the server API for StreamManagement service.
// All implementations should embed UnimplementedStreamManagementServer
// for forward compatibility.
//
// The StreamManagement service is implemented by the Pomerium Authorize
// service on the same internal GRPC server as ExtAuthz.
type StreamManagementServer interface {
	// ManageStream is called by Envoy when a long-lived stream begins.
	// This RPC stays alive for the lifetime of the stream. If it ends before
	// the underlying stream does, Envoy will close the connection.
	ManageStream(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error
	// ServeChannel is called when Pomerium "hijacks" the stream by setting target=Internal
	// in an AllowResponse. When this happens, Envoy reroutes traffic such that this stream
	// temporarily becomes the upstream server, and delays the connection to the real upstream
	// until this stream is closed. Afterwards, Envoy connects to the real upstream server and
	// "hands off" the stream internally in a way that is transparent to the downstream.
	ServeChannel(grpc.BidiStreamingServer[ChannelMessage, ChannelMessage]) error
}

// UnimplementedStreamManagementServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamManagementServer struct{}

func (UnimplementedStreamManagementServer) ManageStream(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ManageStream not implemented")
}
func (UnimplementedStreamManagementServer) ServeChannel(grpc.BidiStreamingServer[ChannelMessage, ChannelMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ServeChannel not implemented")
}
func (UnimplementedStreamManagementServer) testEmbeddedByValue() {}

// UnsafeStreamManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamManagementServer will
// result in compilation errors.
type UnsafeStreamManagementServer interface {
	mustEmbedUnimplementedStreamManagementServer()
}

func RegisterStreamManagementServer(s grpc.ServiceRegistrar, srv StreamManagementServer) {
	// If the following call panics, it indicates UnimplementedStreamManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamManagement_ServiceDesc, srv)
}

func _StreamManagement_ManageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamManagementServer).ManageStream(&grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamManagement_ManageStreamServer = grpc.BidiStreamingServer[ClientMessage, ServerMessage]

func _StreamManagement_ServeChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamManagementServer).ServeChannel(&grpc.GenericServerStream[ChannelMessage, ChannelMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamManagement_ServeChannelServer = grpc.BidiStreamingServer[ChannelMessage, ChannelMessage]

// StreamManagement_ServiceDesc is the grpc.ServiceDesc for StreamManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.extensions.ssh.StreamManagement",
	HandlerType: (*StreamManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ManageStream",
			Handler:       _StreamManagement_ManageStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ServeChannel",
			Handler:       _StreamManagement_ServeChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/pomerium/envoy-custom/api/extensions/filters/network/ssh/ssh.proto",
}
