// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: github.com/pomerium/envoy-custom/api/extensions/filters/network/ssh/filters/session_recording/session_recording.proto

package session_recording

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordingService_RecordingFinalized_FullMethodName = "/pomerium.extensions.ssh.filters.session_recording.RecordingService/RecordingFinalized"
)

// RecordingServiceClient is the client API for RecordingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordingServiceClient interface {
	// Called when a recording is complete. The following will be written to the stream, in order:
	//   - 1 metadata message
	//   - zero or more chunks, each containing part of the raw recording
	//   - 1 checksum message, computed over all chunks in order (the raw data, not the serialized
	//     RecordingData message)
	RecordingFinalized(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RecordingData, emptypb.Empty], error)
}

type recordingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingServiceClient(cc grpc.ClientConnInterface) RecordingServiceClient {
	return &recordingServiceClient{cc}
}

func (c *recordingServiceClient) RecordingFinalized(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RecordingData, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordingService_ServiceDesc.Streams[0], RecordingService_RecordingFinalized_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RecordingData, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordingService_RecordingFinalizedClient = grpc.ClientStreamingClient[RecordingData, emptypb.Empty]

// RecordingServiceServer is the server API for RecordingService service.
// All implementations should embed UnimplementedRecordingServiceServer
// for forward compatibility.
type RecordingServiceServer interface {
	// Called when a recording is complete. The following will be written to the stream, in order:
	//   - 1 metadata message
	//   - zero or more chunks, each containing part of the raw recording
	//   - 1 checksum message, computed over all chunks in order (the raw data, not the serialized
	//     RecordingData message)
	RecordingFinalized(grpc.ClientStreamingServer[RecordingData, emptypb.Empty]) error
}

// UnimplementedRecordingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordingServiceServer struct{}

func (UnimplementedRecordingServiceServer) RecordingFinalized(grpc.ClientStreamingServer[RecordingData, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method RecordingFinalized not implemented")
}
func (UnimplementedRecordingServiceServer) testEmbeddedByValue() {}

// UnsafeRecordingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingServiceServer will
// result in compilation errors.
type UnsafeRecordingServiceServer interface {
	mustEmbedUnimplementedRecordingServiceServer()
}

func RegisterRecordingServiceServer(s grpc.ServiceRegistrar, srv RecordingServiceServer) {
	// If the following call panics, it indicates UnimplementedRecordingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordingService_ServiceDesc, srv)
}

func _RecordingService_RecordingFinalized_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecordingServiceServer).RecordingFinalized(&grpc.GenericServerStream[RecordingData, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordingService_RecordingFinalizedServer = grpc.ClientStreamingServer[RecordingData, emptypb.Empty]

// RecordingService_ServiceDesc is the grpc.ServiceDesc for RecordingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.extensions.ssh.filters.session_recording.RecordingService",
	HandlerType: (*RecordingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordingFinalized",
			Handler:       _RecordingService_RecordingFinalized_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/pomerium/envoy-custom/api/extensions/filters/network/ssh/filters/session_recording/session_recording.proto",
}
