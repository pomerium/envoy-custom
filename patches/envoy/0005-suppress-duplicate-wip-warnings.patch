diff --git a/source/common/protobuf/message_validator_impl.cc b/source/common/protobuf/message_validator_impl.cc
index 262b0350bb..a669160e18 100644
--- a/source/common/protobuf/message_validator_impl.cc
+++ b/source/common/protobuf/message_validator_impl.cc
@@ -36,6 +36,14 @@ void WipCounterBase::setWipCounter(Stats::Counter& wip_counter) {
 }
 
 void WipCounterBase::onWorkInProgressCommon(absl::string_view description) {
+  absl::MutexLock l(&descriptions_mu_);
+  const uint64_t hash = HashUtil::xxHash64(description);
+  auto it = descriptions_.insert(hash);
+  // If we've seen this before, skip.
+  if (!it.second) {
+    return;
+  }
+
   ENVOY_LOG_MISC(warn, "{}", description);
   if (wip_counter_ != nullptr) {
     wip_counter_->inc();
diff --git a/source/common/protobuf/message_validator_impl.h b/source/common/protobuf/message_validator_impl.h
index 676c3f9056..2177f7dbc2 100644
--- a/source/common/protobuf/message_validator_impl.h
+++ b/source/common/protobuf/message_validator_impl.h
@@ -7,6 +7,7 @@
 #include "source/common/common/logger.h"
 
 #include "absl/container/flat_hash_set.h"
+#include "absl/synchronization/mutex.h"
 
 namespace Envoy {
 namespace ProtobufMessage {
@@ -43,6 +44,11 @@ protected:
   void onWorkInProgressCommon(absl::string_view description);
 
 private:
+  // Track hashes of descriptions we've seen, to avoid log spam. A hash is used here to avoid
+  // wasting memory with unused strings.
+  static inline absl::flat_hash_set<uint64_t> descriptions_ ABSL_GUARDED_BY(descriptions_mu_);
+  static inline absl::Mutex descriptions_mu_;
+
   Stats::Counter* wip_counter_{};
   uint64_t prestats_wip_count_{};
 };
