From 6e335cfdca56c593dc7827eb67ad3b1e499984cf Mon Sep 17 00:00:00 2001
From: Joe Kralicky <joekralicky@gmail.com>
Date: Fri, 22 Aug 2025 09:36:51 -0400
Subject: [PATCH] generic proxy: add onDownstreamConnected() callback to
 ServerCodec (#40747)

Commit Message: generic proxy: add onDownstreamConnected() callback to
ServerCodec
Additional Description:
This adds a new method ServerCodec::onDownstreamConnected() that is
called when the downstream connection is established. This can be used
for initialization steps that require the connection returned by
ServerCodecCallbacks::connection() to have a value and be in a connected
state.

Risk Level: Low; the new method has an empty default implementation, as
to not break existing ServerCodec implementations.
Testing: Updated unit tests and mocks
Docs Changes:
Release Notes:
Platform Specific Features:
[Optional Runtime guard:]
[Optional Fixes #Issue]
[Optional Fixes commit #PR or SHA]
[Optional Deprecated:]
[Optional [API
Considerations](https://github.com/envoyproxy/envoy/blob/main/api/review_checklist.md):]

Signed-off-by: Joe Kralicky <joekralicky@gmail.com>
---
 .../filters/network/generic_proxy/interface/codec.h    | 10 +++++++++-
 .../extensions/filters/network/generic_proxy/proxy.h   |  1 +
 .../filters/network/generic_proxy/fake_codec.h         |  5 +++++
 .../filters/network/generic_proxy/mocks/codec.h        |  1 +
 .../filters/network/generic_proxy/proxy_test.cc        |  6 ++++++
 5 files changed, 22 insertions(+), 1 deletion(-)

diff --git a/source/extensions/filters/network/generic_proxy/interface/codec.h b/source/extensions/filters/network/generic_proxy/interface/codec.h
index 2b1ba02cee..682a2ea5fb 100644
--- a/source/extensions/filters/network/generic_proxy/interface/codec.h
+++ b/source/extensions/filters/network/generic_proxy/interface/codec.h
@@ -22,12 +22,20 @@ public:
   virtual ~ServerCodec() = default;
 
   /**
-   * Set callbacks of server codec.
+   * Set callbacks of server codec. Called before onConnected().
    * @param callbacks callbacks of server codec. This callback will have same or longer
    * lifetime as the server codec.
    */
   virtual void setCodecCallbacks(ServerCodecCallbacks& callbacks) PURE;
 
+  /**
+   * Called when the downstream connection is established.
+   *
+   * The connection obtained from ServerCodecCallbacks::connection() will be valid when this
+   * callback is invoked. It should not be relied upon to be valid until this point.
+   */
+  virtual void onConnected() {}
+
   /**
    * Decode request frame from downstream connection.
    * @param buffer data to decode.
diff --git a/source/extensions/filters/network/generic_proxy/proxy.h b/source/extensions/filters/network/generic_proxy/proxy.h
index 8e196116b8..f6d220401e 100644
--- a/source/extensions/filters/network/generic_proxy/proxy.h
+++ b/source/extensions/filters/network/generic_proxy/proxy.h
@@ -370,6 +370,7 @@ public:
   // Envoy::Network::ReadFilter
   Envoy::Network::FilterStatus onData(Envoy::Buffer::Instance& data, bool end_stream) override;
   Envoy::Network::FilterStatus onNewConnection() override {
+    server_codec_->onConnected();
     return Envoy::Network::FilterStatus::Continue;
   }
   void initializeReadFilterCallbacks(Envoy::Network::ReadFilterCallbacks& callbacks) override {
diff --git a/test/extensions/filters/network/generic_proxy/fake_codec.h b/test/extensions/filters/network/generic_proxy/fake_codec.h
index 66e63a9bd7..fb96daf46c 100644
--- a/test/extensions/filters/network/generic_proxy/fake_codec.h
+++ b/test/extensions/filters/network/generic_proxy/fake_codec.h
@@ -163,6 +163,11 @@ public:
     }
 
     void setCodecCallbacks(ServerCodecCallbacks& callback) override { callback_ = &callback; }
+    void onConnected() override {
+      ASSERT(callback_->connection().has_value());
+      ASSERT(callback_->connection()->state() == Network::Connection::State::Open);
+      ASSERT(!callback_->connection()->connecting());
+    }
     void decode(Buffer::Instance& buffer, bool) override {
       ENVOY_LOG(debug, "FakeServerCodec::decode: {}", buffer.toString());
 
diff --git a/test/extensions/filters/network/generic_proxy/mocks/codec.h b/test/extensions/filters/network/generic_proxy/mocks/codec.h
index b93f4c8184..8a89e5cc3a 100644
--- a/test/extensions/filters/network/generic_proxy/mocks/codec.h
+++ b/test/extensions/filters/network/generic_proxy/mocks/codec.h
@@ -55,6 +55,7 @@ public:
   }
 
   MOCK_METHOD(void, setCodecCallbacks, (ServerCodecCallbacks & callbacks));
+  MOCK_METHOD(void, onConnected, ());
   MOCK_METHOD(void, decode, (Buffer::Instance & buffer, bool end_stream));
   MOCK_METHOD(EncodingResult, encode, (const StreamFrame&, EncodingContext& ctx));
   MOCK_METHOD(ResponseHeaderFramePtr, respond,
diff --git a/test/extensions/filters/network/generic_proxy/proxy_test.cc b/test/extensions/filters/network/generic_proxy/proxy_test.cc
index d905524e5f..73ccb1556b 100644
--- a/test/extensions/filters/network/generic_proxy/proxy_test.cc
+++ b/test/extensions/filters/network/generic_proxy/proxy_test.cc
@@ -232,6 +232,12 @@ public:
 
 TEST_F(FilterTest, SimpleOnNewConnection) {
   initializeFilter();
+
+  EXPECT_CALL(*server_codec_, onConnected()).WillOnce(Invoke([this] {
+    ASSERT_NE(server_codec_callbacks_, nullptr);
+    ASSERT_EQ(&filter_callbacks_.connection_, server_codec_callbacks_->connection().ptr());
+  }));
+
   EXPECT_EQ(Network::FilterStatus::Continue, filter_->onNewConnection());
 }
 
-- 
2.43.0

